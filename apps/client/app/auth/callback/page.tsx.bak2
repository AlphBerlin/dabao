import { redirect } from "next/navigation";
import { createClient } from "@/lib/supabase/server";

// Convert to server component to properly handle the auth code exchange
export default async function AuthCallbackPage({
  searchParams,
}: {
  searchParams: { code?: string; error?: string; error_description?: string; redirect?: string };
}) {
  const redirectTo = searchParams.redirect || "/";
  const code = searchParams.code;
  const authError = searchParams.error;
  const errorDescription = searchParams.error_description;

  // Handle auth errors from the callback
  if (authError) {
    console.error("Auth error:", authError, errorDescription);
    return renderErrorPage(errorDescription || "Authentication error");
  }

  // If no code provided, redirect to the intended destination
  if (!code) {
    redirect(redirectTo);
  }

  try {
    // Create server-side Supabase client
    const supabase = await createClient();
    
    // Exchange the code for a session - this works on the server side
    const { error } = await supabase.auth.exchangeCodeForSession(code);
    
    if (error) {
      console.error("Code exchange error:", error);
      return renderErrorPage(error.message);
    }
    
    // Successful authentication, redirect to the intended destination
    redirect(redirectTo);
  } catch (err: any) {
    console.error("Callback handling error:", err);
    return renderErrorPage("Failed to process authentication: " + (err.message || "Unknown error"));
  }
}

// Helper function to render error page with pure HTML
function renderErrorPage(error: string) {
  return (
    <div className="flex min-h-screen items-center justify-center px-4">
      <div className="w-full max-w-md p-6 bg-white rounded-lg shadow-md">
        <h1 className="text-2xl font-bold text-center mb-4">Authentication Error</h1>
        <div className="p-4 border border-red-300 bg-red-50 text-red-900 rounded-md">
          {error}
        </div>
      </div>
    </div>
  );
}
