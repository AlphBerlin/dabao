// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["dabao_mcp", "public"]
}

// User model with Supabase integration
model User {
  id          String     @id @default(uuid())
  email       String     @unique
  supabaseId  String     @unique // Link to Supabase auth
  displayName String?
  avatarUrl   String?
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  roles       Role[]
  messages    Message[]
  auditLogs   AuditLog[]
  templates   Template[]

  @@map("users")
  @@schema("public")
}

// Role model for user permissions
model Role {
  id          String       @id @default(uuid())
  name        String       @unique
  description String?
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  users       User[]
  permissions Permission[]

  @@map("roles")
  @@schema("public")
}

// Permission model for fine-grained access control
model Permission {
  id         String   @id @default(uuid())
  resource   String // The resource this permission applies to
  action     String // The action allowed (create, read, update, delete)
  conditions Json? // Optional conditions for the permission
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  roles      Role[]

  @@unique([resource, action])
  @@map("permissions")
  @@schema("public")
}

// Message model for storing all messages
model Message {
  id           String    @id @default(uuid())
  content      String
  type         String    @default("TEXT") // TEXT, MEDIA, TEMPLATE
  status       String    @default("DRAFT") // DRAFT, SENT, FAILED
  platformType String    @default("TELEGRAM") // TELEGRAM, EMAIL, SMS, etc.
  platformId   String? // External ID from the platform
  chatId       String? // Recipient ID/chat ID
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  sentAt       DateTime? @map("sent_at")
  metadata     Json?
  campaignId   String?
  senderId     String
  sender       User      @relation(fields: [senderId], references: [id])
  mediaUrls    Media[]
  templateId   String?
  template     Template? @relation(fields: [templateId], references: [id])

  @@map("messages")
  @@schema("dabao_mcp")
}

// Media model for storing media attachments
model Media {
  id        String   @id @default(uuid())
  url       String
  type      String // IMAGE, VIDEO, DOCUMENT, AUDIO
  caption   String?
  messageId String
  message   Message  @relation(fields: [messageId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")

  @@map("media")
  @@schema("dabao_mcp")
}

// Template model for message templates
model Template {
  id                String    @id @default(uuid())
  name              String
  content           String
  category          String?
  supportsVariables Boolean   @default(false) @map("supports_variables")
  requiredVariables Json?     @map("required_variables")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  createdById       String    @map("created_by_id")
  createdBy         User      @relation(fields: [createdById], references: [id])
  messages          Message[]

  @@map("templates")
  @@schema("dabao_mcp")
}

// AuditLog model for tracking user actions
model AuditLog {
  id         String   @id @default(uuid())
  userId     String   @map("user_id")
  user       User     @relation(fields: [userId], references: [id])
  action     String // CREATE, READ, UPDATE, DELETE
  resource   String // Which resource was affected
  resourceId String?  @map("resource_id") // ID of the affected resource
  timestamp  DateTime @default(now())
  ipAddress  String?  @map("ip_address")
  userAgent  String?  @map("user_agent")
  details    Json? // Additional context about the action

  @@map("audit_logs")
  @@schema("dabao_mcp")
}

// MCP specific models
model MCPIntent {
  id               String      @id @default(uuid())
  name             String      @unique
  description      String?
  patterns         String[] // Example utterances for this intent
  responseTemplate String?     @map("response_template")
  createdAt        DateTime    @default(now()) @map("created_at")
  updatedAt        DateTime    @updatedAt @map("updated_at")
  actions          MCPAction[]

  @@map("mcp_intents")
  @@schema("dabao_mcp")
}

model MCPAction {
  id         String    @id @default(uuid())
  type       String // The type of action (e.g., "send_message", "create_campaign")
  resourceId String?   @map("resource_id")
  parameters Json? // Parameters for this action
  intentId   String    @map("intent_id")
  intent     MCPIntent @relation(fields: [intentId], references: [id])
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")

  @@map("mcp_actions")
  @@schema("dabao_mcp")
}

model MCPSession {
  id        String   @id @default(uuid())
  sessionId String   @unique @map("session_id") // External session identifier
  context   Json? // Current conversation context
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  expiresAt DateTime @map("expires_at")

  @@map("mcp_sessions")
  @@schema("dabao_mcp")
}

// For storing API keys for accessing the MCP server
model APIKey {
  id          String    @id @default(uuid())
  key         String    @unique
  name        String
  description String?
  permissions Json? // What this key is allowed to do
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  expiresAt   DateTime? @map("expires_at")

  @@map("api_keys")
  @@schema("dabao_mcp")
}
