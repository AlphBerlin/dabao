generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["dabao", "dabao_tenant"]
}

// Shared enum for user roles across the control-plane and tenant apps
enum UserRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER

  @@schema("dabao")
}

// Currency enum for billing and rewards
enum Currency {
  USD
  EUR
  GBP
  SGD
  INR
  AUD
  CAD
  JPY
  CNY
  MYR

  @@schema("dabao")
}

// Reward type enum
enum RewardType {
  POINTS
  DISCOUNT
  FREEBIE
  CASH_BACK
  TIER_UPGRADE
  CUSTOM

  @@schema("dabao")
}

// -----------------------------
// Control-plane models (Organization & Admin)
// -----------------------------
model Organization {
  id           String   @id @default(cuid())
  name         String
  slug         String   @unique
  ownerId      String   @map("owner_id")
  billingEmail String   @map("billing_email")
  address      String?
  logo         String?
  settings     Json?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  projects Project[]
  users    UserOrganization[]
  billing  Billing[]

  @@map("organizations")
  @@schema("dabao")
}

model UserOrganization {
  id             String   @id @default(cuid())
  userId         String   @map("user_id")
  organizationId String   @map("organization_id")
  role           UserRole @default(MEMBER)
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@map("user_organizations")
  @@schema("dabao")
}

// Billing model for organizations
model Billing {
  id             String   @id @default(cuid())
  organizationId String   @map("organization_id")
  plan           String   @default("free") // free, starter, pro, enterprise
  currency       Currency @default(USD)
  amount         Decimal  @default(0)
  interval       String   @default("month") // month, year
  status         String   @default("active") // active, past_due, canceled
  trialEndsAt    DateTime? @map("trial_ends_at")
  canceledAt     DateTime? @map("canceled_at")
  currentPeriodStart DateTime @default(now()) @map("current_period_start")
  currentPeriodEnd   DateTime @map("current_period_end")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  @@map("billing")
  @@schema("dabao")
}

// -----------------------------
// Tenant models (Project scope)
// -----------------------------
model Project {
  id             String   @id @default(cuid())
  name           String
  description    String?
  slug           String   @unique
  organizationId String   @map("organization_id")
  active         Boolean  @default(true)
  customDomain   String?  @unique @map("custom_domain")
  settings       Json? // Free-form tenant config
  theme          Json? // e.g. Tailwind theme overrides
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  organization Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  apiKeys      ApiKey[]
  invites      ProjectInvite[]
  preferences  ProjectPreference?
  rewards      Reward[]
  customers    Customer[]
  campaigns    Campaign[]

  @@map("projects")
  @@schema("dabao_tenant")
}

// Project preferences for more structured settings
model ProjectPreference {
  id                String   @id @default(cuid())
  projectId         String   @unique @map("project_id")
  pointsName        String   @default("Points") @map("points_name")
  pointsAbbreviation String  @default("pts") @map("points_abbreviation")
  welcomeMessage    String?  @map("welcome_message")
  defaultCurrency   Currency @default(USD) @map("default_currency")
  enableReferrals   Boolean  @default(true) @map("enable_referrals")
  enableTiers       Boolean  @default(false) @map("enable_tiers")
  enableGameification Boolean @default(false) @map("enable_gameification")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_preferences")
  @@schema("dabao_tenant")
}

model ProjectInvite {
  id        String   @id @default(cuid())
  email     String
  projectId String   @map("project_id")
  role      UserRole @default(MEMBER)
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now()) @map("created_at")

  // Relation
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([email, projectId])
  @@map("project_invites")
  @@schema("dabao_tenant")
}

model ApiKey {
  id         String    @id @default(cuid())
  name       String
  key        String    @unique
  projectId  String    @map("project_id")
  expiresAt  DateTime? @map("expires_at")
  lastUsedAt DateTime? @map("last_used_at")
  createdAt  DateTime  @default(now()) @map("created_at")

  // Relation
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("api_keys")
  @@schema("dabao_tenant")
}

// Customer model for the loyalty program
model Customer {
  id         String    @id @default(cuid())
  projectId  String    @map("project_id")
  name       String?
  email      String
  phone      String?
  externalId String?   @map("external_id")
  metadata   Json?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt @map("updated_at")

  // Relations
  project    Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  rewards    CustomerReward[]
  referrals  CustomerReferral[]
  activities CustomerActivity[]
  
  @@unique([projectId, email])
  @@unique([projectId, externalId])
  @@map("customers")
  @@schema("dabao_tenant")
}

// Reward model for the loyalty program
model Reward {
  id          String     @id @default(cuid())
  projectId   String     @map("project_id")
  name        String
  description String?
  type        RewardType
  value       Int        // Points value or discount percentage
  code        String?    // For discount codes
  active      Boolean    @default(true)
  image       String?
  expiresAt   DateTime?  @map("expires_at")
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  
  // Relations
  project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  customers   CustomerReward[]
  campaigns   CampaignReward[]
  
  @@unique([projectId, code])
  @@map("rewards")
  @@schema("dabao_tenant")
}

// CustomerReward model for tracking rewards claimed by customers
model CustomerReward {
  id           String    @id @default(cuid())
  customerId   String    @map("customer_id")
  rewardId     String    @map("reward_id")
  claimed      Boolean   @default(false)
  claimedAt    DateTime? @map("claimed_at")
  redeemedAt   DateTime? @map("redeemed_at")
  expiresAt    DateTime? @map("expires_at")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  
  // Relations
  customer     Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  reward       Reward    @relation(fields: [rewardId], references: [id], onDelete: Cascade)
  
  @@map("customer_rewards")
  @@schema("dabao_tenant")
}

// CustomerReferral model for tracking referrals
model CustomerReferral {
  id             String    @id @default(cuid())
  customerId     String    @map("customer_id")
  referralCode   String    @unique @map("referral_code")
  referredCount  Int       @default(0) @map("referred_count")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  
  // Relations
  customer       Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  referredUsers  ReferredUser[]
  
  @@map("customer_referrals")
  @@schema("dabao_tenant")
}

// ReferredUser model for tracking users referred by customers
model ReferredUser {
  id                String   @id @default(cuid())
  customerReferralId String  @map("customer_referral_id")
  email             String
  convertedAt       DateTime? @map("converted_at")
  createdAt         DateTime @default(now()) @map("created_at")
  
  // Relations
  customerReferral  CustomerReferral @relation(fields: [customerReferralId], references: [id], onDelete: Cascade)
  
  @@map("referred_users")
  @@schema("dabao_tenant")
}

// Campaign model for marketing campaigns
model Campaign {
  id          String   @id @default(cuid())
  projectId   String   @map("project_id")
  name        String
  description String?
  active      Boolean  @default(true)
  startDate   DateTime @map("start_date")
  endDate     DateTime @map("end_date")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relations
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  rewards     CampaignReward[]
  
  @@map("campaigns")
  @@schema("dabao_tenant")
}

// CampaignReward model for tracking rewards offered in campaigns
model CampaignReward {
  id         String   @id @default(cuid())
  campaignId String   @map("campaign_id")
  rewardId   String   @map("reward_id")
  createdAt  DateTime @default(now()) @map("created_at")
  
  // Relations
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  reward     Reward   @relation(fields: [rewardId], references: [id], onDelete: Cascade)
  
  @@unique([campaignId, rewardId])
  @@map("campaign_rewards")
  @@schema("dabao_tenant")
}

// CustomerActivity model for tracking customer activities
model CustomerActivity {
  id           String   @id @default(cuid())
  customerId   String   @map("customer_id")
  type         String   // purchase, login, referral, etc.
  description  String?
  pointsEarned Int?     @map("points_earned")
  metadata     Json?
  createdAt    DateTime @default(now()) @map("created_at")
  
  // Relations
  customer     Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  @@map("customer_activities")
  @@schema("dabao_tenant")
}

// -----------------------------
// Authentication / Shared user
// -----------------------------
model User {
  id             String   @id @default(cuid())
  email          String   @unique
  supabaseUserId String?  @unique @map("supabase_user_id")
  name           String?
  image          String?
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  organizations UserOrganization[]

  @@map("users")
  @@schema("dabao")
}

// -----------------------------
// Indexes & Additional Enhancements
// -----------------------------
// • Added @@schema to separate control-plane and tenant schemas
// • Mapped all timestamp columns to snake_case for consistency
// • Ensured cascade deletes on foreign keys
// • Kept enums centralized for roles

// Remember: in Postgres, after migrating:
//   SET search_path = dabao, public;
// you can enable RLS on `projects`, `project_invites`, etc., and use
// `current_setting('jwt.claims.project_id')::uuid` in policies.
