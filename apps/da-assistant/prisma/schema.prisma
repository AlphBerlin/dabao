generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["da_assistent", "dabao", "dabao_tenant"]
}

model Session {
  id        String    @id @default(uuid())
  title     String?
  userId    String    @map("user_id")
  summary   String?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  messages  Message[]
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
  @@schema("da_assistent")
}

model Message {
  id        String   @id @default(uuid())
  sessionId String   @map("session_id")
  content   String
  senderId  String   @map("sender_id")
  type      String   @default("TEXT")
  status    String   @default("SENT")
  metadata  Json?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  sentAt    DateTime @default(now()) @map("sent_at")
  media     Media[]
  session   Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@index([senderId])
  @@map("messages")
  @@schema("da_assistent")
}

model Media {
  id        String   @id @default(uuid())
  messageId String   @map("message_id")
  url       String
  type      String
  mimeType  String?  @map("mime_type")
  filename  String?  @map("file_name")
  size      Int?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([messageId])
  @@map("media")
  @@schema("da_assistent")
}

model AuditLog {
  id         String   @id @default(uuid())
  userId     String?  @map("user_id")
  action     String
  entityType String?  @map("entity_type")
  entityId   String?  @map("entity_id")
  metadata   Json?
  createdAt  DateTime @default(now()) @map("created_at")
  ipAddress  String?  @map("ip_address")
  userAgent  String?  @map("user_agent")

  @@index([userId])
  @@index([action])
  @@index([entityType, entityId])
  @@map("audit_logs")
  @@schema("da_assistent")
}

model Organization {
  id           String             @id @default(cuid())
  name         String
  slug         String             @unique
  ownerId      String             @map("owner_id")
  billingEmail String             @map("billing_email")
  address      String?
  logo         String?
  settings     Json?
  createdAt    DateTime           @default(now()) @map("created_at")
  updatedAt    DateTime           @updatedAt @map("updated_at")
  billing      Billing[]
  users        UserOrganization[]
  projects     Project[]

  @@map("organizations")
  @@schema("dabao")
}

model UserOrganization {
  id             String       @id @default(cuid())
  userId         String       @map("user_id")
  organizationId String       @map("organization_id")
  role           UserRole     @default(MEMBER)
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@map("user_organizations")
  @@schema("dabao")
}

model Billing {
  id                 String       @id @default(cuid())
  organizationId     String       @map("organization_id")
  plan               String       @default("free")
  currency           Currency     @default(USD)
  amount             Decimal      @default(0)
  interval           String       @default("month")
  status             String       @default("active")
  trialEndsAt        DateTime?    @map("trial_ends_at")
  canceledAt         DateTime?    @map("canceled_at")
  currentPeriodStart DateTime     @default(now()) @map("current_period_start")
  currentPeriodEnd   DateTime     @map("current_period_end")
  createdAt          DateTime     @default(now()) @map("created_at")
  updatedAt          DateTime     @updatedAt @map("updated_at")
  organization       Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("billing")
  @@schema("dabao")
}

model Project {
  id                String             @id @default(cuid())
  name              String
  slug              String             @unique
  organizationId    String             @map("organization_id")
  active            Boolean            @default(true)
  customDomain      String?            @unique @map("custom_domain")
  settings          Json?
  theme             Json?
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  description       String?
  status            String?
  ai_images         ai_images[]
  apiKeys           ApiKey[]
  brandingSettings  BrandingSettings?
  campaigns         Campaign[]
  customers         Customer[]
  membershipTiers   MembershipTier[]
  invites           ProjectInvite[]
  preferences       ProjectPreference?
  organization      Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  redemptionRules   RedemptionRule[]
  rewards           Reward[]
  stampCards        StampCard[]
  telegramCampaigns TelegramCampaign[]
  telegramCommands  TelegramCommand[]
  telegramMenus     TelegramMenu[]
  telegramMessages  TelegramMessage[]
  telegramSettings  TelegramSettings?
  TelegramUser      TelegramUser[]
  vouchers          Voucher[]

  @@map("projects")
  @@schema("dabao_tenant")
}

model ProjectPreference {
  id                  String   @id @default(cuid())
  projectId           String   @unique @map("project_id")
  pointsName          String   @default("Points") @map("points_name")
  pointsAbbreviation  String   @default("pts") @map("points_abbreviation")
  welcomeMessage      String?  @map("welcome_message")
  defaultCurrency     Currency @default(USD) @map("default_currency")
  enableReferrals     Boolean  @default(true) @map("enable_referrals")
  enableTiers         Boolean  @default(false) @map("enable_tiers")
  enableGameification Boolean  @default(false) @map("enable_gameification")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")
  pointsExpiryDays    Int?     @map("points_expiry_days")
  pointsToStampRatio  Int      @default(10) @map("points_to_stamp_ratio")
  rewardSystemType    String   @default("POINTS") @map("reward_system_type")
  stampsPerCard       Int      @default(10) @map("stamps_per_card")
  project             Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_preferences")
  @@schema("dabao_tenant")
}

model ProjectInvite {
  id        String   @id @default(cuid())
  email     String
  projectId String   @map("project_id")
  role      UserRole @default(MEMBER)
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now()) @map("created_at")
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([email, projectId])
  @@map("project_invites")
  @@schema("dabao_tenant")
}

model ApiKey {
  id         String    @id @default(cuid())
  name       String
  key        String    @unique
  projectId  String    @map("project_id")
  expiresAt  DateTime? @map("expires_at")
  lastUsedAt DateTime? @map("last_used_at")
  createdAt  DateTime  @default(now()) @map("created_at")
  project    Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("api_keys")
  @@schema("dabao_tenant")
}

model Customer {
  id                  String                      @id @default(cuid())
  projectId           String                      @map("project_id")
  name                String?
  email               String
  phone               String?
  externalId          String?                     @map("external_id")
  metadata            Json?
  createdAt           DateTime                    @default(now())
  updatedAt           DateTime                    @updatedAt @map("updated_at")
  activities          CustomerActivity[]
  customerMemberships CustomerMembership[]
  pointsTransactions  CustomerPointsTransaction[]
  referrals           CustomerReferral[]
  rewards             CustomerReward[]
  project             Project                     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  stampCards          StampCard[]
  telegramUsers       TelegramUser[]
  voucherRedemptions  VoucherRedemption[]

  @@unique([projectId, email])
  @@unique([projectId, externalId])
  @@map("customers")
  @@schema("dabao_tenant")
}

model Reward {
  id          String           @id @default(cuid())
  projectId   String           @map("project_id")
  name        String
  description String?
  type        RewardType
  value       Int
  code        String?
  active      Boolean          @default(true)
  image       String?
  expiresAt   DateTime?        @map("expires_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")
  createdAt   DateTime         @default(now())
  campaigns   CampaignReward[]
  customers   CustomerReward[]
  project     Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, code])
  @@map("rewards")
  @@schema("dabao_tenant")
}

model CustomerReward {
  id         String    @id @default(cuid())
  customerId String    @map("customer_id")
  rewardId   String    @map("reward_id")
  claimed    Boolean   @default(false)
  claimedAt  DateTime? @map("claimed_at")
  redeemedAt DateTime? @map("redeemed_at")
  expiresAt  DateTime? @map("expires_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  createdAt  DateTime  @default(now())
  customer   Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  reward     Reward    @relation(fields: [rewardId], references: [id], onDelete: Cascade)

  @@map("customer_rewards")
  @@schema("dabao_tenant")
}

model CustomerReferral {
  id            String         @id @default(cuid())
  customerId    String         @map("customer_id")
  referralCode  String         @unique @map("referral_code")
  referredCount Int            @default(0) @map("referred_count")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  customer      Customer       @relation(fields: [customerId], references: [id], onDelete: Cascade)
  referredUsers ReferredUser[]

  @@map("customer_referrals")
  @@schema("dabao_tenant")
}

model ReferredUser {
  id                 String           @id @default(cuid())
  customerReferralId String           @map("customer_referral_id")
  email              String
  convertedAt        DateTime?        @map("converted_at")
  createdAt          DateTime         @default(now()) @map("created_at")
  customerReferral   CustomerReferral @relation(fields: [customerReferralId], references: [id], onDelete: Cascade)

  @@map("referred_users")
  @@schema("dabao_tenant")
}

model Campaign {
  id               String            @id @default(cuid())
  projectId        String            @map("project_id")
  name             String
  description      String?
  active           Boolean           @default(true)
  startDate        DateTime?         @map("start_date")
  endDate          DateTime?         @map("end_date")
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  pointsMultiplier Int?              @map("points_multiplier")
  status           CampaignStatus    @default(DRAFT)
  type             CampaignType      @default(CUSTOM)
  rewards          CampaignReward[]
  project          Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  telegramCampaign TelegramCampaign?

  @@map("campaigns")
  @@schema("dabao_tenant")
}

model CampaignReward {
  id         String   @id @default(cuid())
  campaignId String   @map("campaign_id")
  rewardId   String   @map("reward_id")
  createdAt  DateTime @default(now()) @map("created_at")
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  reward     Reward   @relation(fields: [rewardId], references: [id], onDelete: Cascade)

  @@unique([campaignId, rewardId])
  @@map("campaign_rewards")
  @@schema("dabao_tenant")
}

model CustomerActivity {
  id           String   @id @default(cuid())
  customerId   String   @map("customer_id")
  type         String
  description  String?
  pointsEarned Int?     @map("points_earned")
  metadata     Json?
  createdAt    DateTime @default(now()) @map("created_at")
  customer     Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("customer_activities")
  @@schema("dabao_tenant")
}

model MembershipTier {
  id                  String               @id @default(cuid())
  projectId           String               @map("project_id")
  name                String
  description         String?
  level               Int
  pointsThreshold     Int?                 @map("points_threshold")
  stampsThreshold     Int?                 @map("stamps_threshold")
  spendThreshold      Decimal?             @map("spend_threshold")
  subscriptionFee     Decimal?             @map("subscription_fee")
  benefits            Json?
  icon                String?
  autoUpgrade         Boolean              @default(true) @map("auto_upgrade")
  pointsMultiplier    Decimal              @default(1.0) @map("points_multiplier")
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  customerMemberships CustomerMembership[]
  project             Project              @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, level])
  @@map("membership_tiers")
  @@schema("dabao_tenant")
}

model CustomerMembership {
  id                String         @id @default(cuid())
  customerId        String         @map("customer_id")
  membershipTierId  String         @map("membership_tier_id")
  startDate         DateTime       @default(now()) @map("start_date")
  endDate           DateTime?      @map("end_date")
  isActive          Boolean        @default(true) @map("is_active")
  subscriptionId    String?        @map("subscription_id")
  pointsBalance     Int            @default(0) @map("points_balance")
  stampsBalance     Int            @default(0) @map("stamps_balance")
  totalPointsEarned Int            @default(0) @map("total_points_earned")
  totalStampsEarned Int            @default(0) @map("total_stamps_earned")
  totalSpent        Decimal        @default(0) @map("total_spent")
  createdAt         DateTime       @default(now()) @map("created_at")
  updatedAt         DateTime       @updatedAt @map("updated_at")
  customer          Customer       @relation(fields: [customerId], references: [id], onDelete: Cascade)
  membershipTier    MembershipTier @relation(fields: [membershipTierId], references: [id], onDelete: Cascade)

  @@unique([customerId, membershipTierId])
  @@map("customer_memberships")
  @@schema("dabao_tenant")
}

model Voucher {
  id               String              @id @default(cuid())
  projectId        String              @map("project_id")
  code             String
  name             String
  description      String?
  discountType     String              @map("discount_type")
  discountValue    Decimal             @map("discount_value")
  minimumSpend     Decimal?            @map("minimum_spend")
  usageLimit       Int?                @map("usage_limit")
  perCustomerLimit Int?                @map("per_customer_limit")
  startDate        DateTime            @map("start_date")
  endDate          DateTime            @map("end_date")
  isActive         Boolean             @default(true) @map("is_active")
  requiredPoints   Int?                @map("required_points")
  requiredStamps   Int?                @map("required_stamps")
  createdAt        DateTime            @default(now()) @map("created_at")
  updatedAt        DateTime            @updatedAt @map("updated_at")
  redemptions      VoucherRedemption[]
  project          Project             @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, code])
  @@map("vouchers")
  @@schema("dabao_tenant")
}

model VoucherRedemption {
  id         String   @id @default(cuid())
  voucherId  String   @map("voucher_id")
  customerId String   @map("customer_id")
  orderId    String?  @map("order_id")
  usedAt     DateTime @default(now()) @map("used_at")
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  voucher    Voucher  @relation(fields: [voucherId], references: [id], onDelete: Cascade)

  @@unique([voucherId, customerId, orderId])
  @@map("voucher_redemptions")
  @@schema("dabao_tenant")
}

model CustomerPointsTransaction {
  id          String    @id @default(cuid())
  customerId  String    @map("customer_id")
  points      Int
  reason      String
  description String?
  orderId     String?   @map("order_id")
  expiresAt   DateTime? @map("expires_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  customer    Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("customer_points_transactions")
  @@schema("dabao_tenant")
}

model StampCard {
  id            String    @id @default(cuid())
  customerId    String    @map("customer_id")
  projectId     String    @map("project_id")
  totalStamps   Int       @default(0) @map("total_stamps")
  currentStamps Int       @default(0) @map("current_stamps")
  completedAt   DateTime? @map("completed_at")
  redeemed      Boolean   @default(false)
  redeemedAt    DateTime? @map("redeemed_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  createdAt     DateTime  @default(now())
  customer      Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  project       Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  stamps        Stamp[]

  @@map("stamp_cards")
  @@schema("dabao_tenant")
}

model Stamp {
  id          String    @id @default(cuid())
  stampCardId String    @map("stamp_card_id")
  orderId     String?   @map("order_id")
  reason      String
  earnedAt    DateTime  @default(now()) @map("earned_at")
  stampCard   StampCard @relation(fields: [stampCardId], references: [id], onDelete: Cascade)

  @@map("stamps")
  @@schema("dabao_tenant")
}

model RedemptionRule {
  id             String   @id @default(cuid())
  projectId      String   @map("project_id")
  name           String
  description    String?
  ruleType       String   @map("rule_type")
  pointsRequired Int?     @map("points_required")
  stampsRequired Int?     @map("stamps_required")
  outputType     String   @map("output_type")
  voucherId      String?  @map("voucher_id")
  productId      String?  @map("product_id")
  tierUpgradeId  String?  @map("tier_upgrade_id")
  isActive       Boolean  @default(true) @map("is_active")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  project        Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("redemption_rules")
  @@schema("dabao_tenant")
}

model TelegramSettings {
  id             String   @id @default(cuid())
  projectId      String   @unique @map("project_id")
  botToken       String   @map("bot_token")
  botUsername    String   @map("bot_username")
  webhookUrl     String?  @map("webhook_url")
  welcomeMessage String?  @map("welcome_message")
  helpMessage    String?  @map("help_message")
  enableCommands Boolean  @default(true) @map("enable_commands")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  status         String?  @map("status")
  project        Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("telegram_settings")
  @@schema("dabao_tenant")
}

model TelegramUser {
  id               String            @id @default(cuid())
  telegramId       String            @map("telegram_id")
  username         String?
  firstName        String?           @map("first_name")
  lastName         String?           @map("last_name")
  languageCode     String?           @map("language_code")
  customerId       String?           @map("customer_id")
  isSubscribed     Boolean           @default(true) @map("is_subscribed")
  subscribedAt     DateTime          @default(now()) @map("subscribed_at")
  unsubscribedAt   DateTime?         @map("unsubscribed_at")
  lastInteraction  DateTime          @default(now()) @map("last_interaction")
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  projectId        String            @map("project_id")
  receivedMessages TelegramMessage[] @relation("ReceivedMessages")
  sentMessages     TelegramMessage[] @relation("SentMessages")
  customer         Customer?         @relation(fields: [customerId], references: [id])
  project          Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([telegramId, projectId])
  @@map("telegram_users")
  @@schema("dabao_tenant")
}

model TelegramCampaign {
  id              String                 @id @default(cuid())
  projectId       String                 @map("project_id")
  name            String
  description     String?
  messageTemplate String                 @map("message_template")
  buttons         Json?
  imageUrl        String?                @map("image_url")
  scheduledFor    DateTime?              @map("scheduled_for")
  status          TelegramCampaignStatus @default(DRAFT)
  audienceFilter  Json?                  @map("audience_filter")
  sentCount       Int                    @default(0) @map("sent_count")
  deliveredCount  Int                    @default(0) @map("delivered_count")
  readCount       Int                    @default(0) @map("read_count")
  clickCount      Int                    @default(0) @map("click_count")
  createdAt       DateTime               @default(now()) @map("created_at")
  updatedAt       DateTime               @updatedAt @map("updated_at")
  campaignId      String?                @unique @map("campaign_id")
  campaign        Campaign?              @relation(fields: [campaignId], references: [id])
  project         Project                @relation(fields: [projectId], references: [id], onDelete: Cascade)
  messages        TelegramMessage[]

  @@map("telegram_campaigns")
  @@schema("dabao_tenant")
}

model TelegramMessage {
  id            String              @id @default(cuid())
  projectId     String              @map("project_id")
  telegramMsgId String?             @map("telegram_msg_id")
  senderId      String?             @map("sender_id")
  recipientId   String?             @map("recipient_id")
  campaignId    String?             @map("campaign_id")
  messageType   TelegramMessageType @default(TEXT)
  content       String
  buttons       Json?
  mediaUrl      String?             @map("media_url")
  isFromUser    Boolean             @default(false) @map("is_from_user")
  isDelivered   Boolean             @default(false) @map("is_delivered")
  isRead        Boolean             @default(false) @map("is_read")
  hasClicked    Boolean             @default(false) @map("has_clicked")
  sentAt        DateTime            @default(now()) @map("sent_at")
  deliveredAt   DateTime?           @map("delivered_at")
  readAt        DateTime?           @map("read_at")
  clickedAt     DateTime?           @map("clicked_at")
  createdAt     DateTime            @default(now()) @map("created_at")
  campaign      TelegramCampaign?   @relation(fields: [campaignId], references: [id])
  project       Project             @relation(fields: [projectId], references: [id], onDelete: Cascade)
  recipient     TelegramUser?       @relation("ReceivedMessages", fields: [recipientId], references: [id])
  sender        TelegramUser?       @relation("SentMessages", fields: [senderId], references: [id])

  @@map("telegram_messages")
  @@schema("dabao_tenant")
}

model TelegramCommand {
  id          String              @id @default(cuid())
  projectId   String              @map("project_id")
  command     String
  description String
  response    String?
  type        TelegramCommandType
  isEnabled   Boolean             @default(true) @map("is_enabled")
  sortOrder   Int                 @default(0) @map("sort_order")
  metadata    Json?
  createdAt   DateTime            @default(now()) @map("created_at")
  updatedAt   DateTime            @updatedAt @map("updated_at")
  project     Project             @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, command])
  @@map("telegram_commands")
  @@schema("dabao_tenant")
}

model TelegramMenu {
  id          String   @id @default(cuid())
  projectId   String   @map("project_id")
  menuId      String   @map("menu_id")
  name        String
  description String?
  items       Json
  isDefault   Boolean  @default(false) @map("is_default")
  sortOrder   Int      @default(0) @map("sort_order")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, menuId])
  @@map("telegram_menus")
  @@schema("dabao_tenant")
}

model BrandingSettings {
  id             String  @id @default(cuid())
  projectId      String  @unique @map("project_id")
  name           String
  logo           String?
  favicon        String?
  mascot         String?
  customDomain   String? @map("custom_domain")
  primaryColor   String  @default("#6366F1") @map("primary_color")
  secondaryColor String  @default("#4F46E5") @map("secondary_color")
  accentColor    String  @default("#F43F5E") @map("accent_color")
  project        Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("branding_settings")
  @@schema("dabao_tenant")
}

model User {
  id             String             @id @default(cuid())
  email          String             @unique
  supabaseUserId String?            @unique @map("supabase_user_id")
  name           String?
  image          String?
  createdAt      DateTime           @default(now()) @map("created_at")
  updatedAt      DateTime           @updatedAt @map("updated_at")
  sessions       Session[]
  organizations  UserOrganization[]

  @@map("users")
  @@schema("dabao")
}

model casbin_rule {
  id         String   @id
  ptype      String
  v0         String?
  v1         String?
  v2         String?
  v3         String?
  v4         String?
  v5         String?
  created_at DateTime @default(now())

  @@schema("dabao")
}

model ai_images {
  id          String   @id
  project_id  String
  user_id     String
  prompt      String
  provider    String
  size        String?
  style       String?
  quality     String?
  image_url   String
  storage_key String
  metadata    Json?
  created_at  DateTime @default(now())
  projects    Project  @relation(fields: [project_id], references: [id], onDelete: Cascade)

  @@schema("dabao_tenant")
}

model auth_tokens {
  id           String    @id
  token        String    @unique
  policy_ptype String
  project_id   String?
  user_id      String?
  expires_at   DateTime?
  createdAt    DateTime  @default(now())
  last_used_at DateTime?

  @@schema("dabao_tenant")
}

enum UserRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER

  @@schema("dabao")
}

enum Currency {
  USD
  EUR
  GBP
  SGD
  INR
  AUD
  CAD
  JPY
  CNY
  MYR

  @@schema("dabao")
}

enum RewardType {
  POINTS
  DISCOUNT
  FREEBIE
  CASH_BACK
  TIER_UPGRADE
  CUSTOM

  @@schema("dabao")
}

enum TelegramMessageType {
  TEXT
  IMAGE
  VIDEO
  DOCUMENT
  STICKER
  LOCATION
  CONTACT
  POLL
  ANIMATION

  @@schema("dabao")
}

enum TelegramCampaignStatus {
  DRAFT
  SCHEDULED
  SENDING
  COMPLETED
  CANCELLED
  FAILED

  @@schema("dabao")
}

enum TelegramCommandType {
  TEXT_RESPONSE
  BUTTON_MENU
  POINTS_INFO
  COUPON_GENERATOR
  MEMBERSHIP_INFO
  CUSTOM_ACTION

  @@schema("dabao")
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  ACTIVE
  PAUSED
  COMPLETED
  CANCELED

  @@schema("dabao_tenant")
}

enum CampaignType {
  WELCOME
  REFERRAL
  POINTS_MULTIPLIER
  BIRTHDAY
  ANNIVERSARY
  PROMOTION
  SPECIAL_EVENT
  HOLIDAY
  CUSTOM

  @@schema("dabao_tenant")
}
