syntax = "proto3";

package dabao.mcp;

// Main service definition for MCP (Model Context Protocol)
service MCPService {
  // Bidirectional streaming RPC for chat-based interactions
  rpc Chat(stream ChatRequest) returns (stream ChatResponse);
  
  // Process a single user request
  rpc ProcessRequest(RequestMessage) returns (ResponseMessage);
  
  // Stream events for real-time updates
  rpc StreamEvents(EventStreamRequest) returns (stream EventMessage);
}

// Authentication service
service AuthService {
  // Authenticate user and get token
  rpc Authenticate(AuthRequest) returns (AuthResponse);
  
  // Validate existing token
  rpc ValidateToken(TokenValidationRequest) returns (TokenValidationResponse);
  
  // Refresh expired token
  rpc RefreshToken(RefreshTokenRequest) returns (AuthResponse);
}

// Campaign management service
service CampaignService {
  // List all campaigns
  rpc ListCampaigns(ListCampaignsRequest) returns (ListCampaignsResponse);
  
  // Get campaign details
  rpc GetCampaign(GetCampaignRequest) returns (Campaign);
  
  // Create a new campaign
  rpc CreateCampaign(CreateCampaignRequest) returns (Campaign);
  
  // Update an existing campaign
  rpc UpdateCampaign(UpdateCampaignRequest) returns (Campaign);
  
  // Delete a campaign
  rpc DeleteCampaign(DeleteCampaignRequest) returns (DeleteCampaignResponse);
  
  // Schedule a campaign
  rpc ScheduleCampaign(ScheduleCampaignRequest) returns (Campaign);
}

// Telegram service for message composition and delivery
service TelegramService {
  // Compose and send a message
  rpc SendMessage(TelegramMessageRequest) returns (TelegramMessageResponse);
  
  // Stream incoming messages
  rpc ReceiveMessages(ReceiveMessagesRequest) returns (stream TelegramMessageEvent);
  
  // Get message templates
  rpc GetTemplates(GetTemplatesRequest) returns (GetTemplatesResponse);
}

// Analytics service
service AnalyticsService {
  // Get campaign performance metrics
  rpc GetCampaignMetrics(CampaignMetricsRequest) returns (CampaignMetricsResponse);
  
  // Get user engagement data
  rpc GetEngagementData(EngagementDataRequest) returns (EngagementDataResponse);
  
  // Generate custom report
  rpc GenerateReport(ReportRequest) returns (ReportResponse);
}

// Common message definitions

message ChatRequest {
  string user_id = 1;
  string message = 2;
  map<string, string> context = 3;
  string session_id = 4;
}

message ChatResponse {
  string message = 1;
  repeated Action actions = 2;
  map<string, string> context = 3;
  bool requires_followup = 4;
}

message Action {
  string type = 1;
  string resource_id = 2;
  map<string, string> parameters = 3;
}

message RequestMessage {
  string user_id = 1;
  string intent = 2;
  map<string, string> parameters = 3;
  string session_id = 4;
}

message ResponseMessage {
  string message = 1;
  bool success = 2;
  string error_code = 3;
  string error_message = 4;
  bytes payload = 5;
}

message EventStreamRequest {
  string user_id = 1;
  repeated string event_types = 2;
}

message EventMessage {
  string event_type = 1;
  bytes payload = 2;
  string timestamp = 3;
}

// Auth messages
message AuthRequest {
  string username = 1;
  string password = 2;
}

message AuthResponse {
  string token = 1;
  string refresh_token = 2;
  uint64 expires_at = 3;
  string user_id = 4;
  repeated string roles = 5;
}

message TokenValidationRequest {
  string token = 1;
}

message TokenValidationResponse {
  bool valid = 1;
  string user_id = 2;
  repeated string roles = 3;
}

message RefreshTokenRequest {
  string refresh_token = 1;
}

// Campaign messages
message Campaign {
  string id = 1;
  string name = 2;
  string description = 3;
  CampaignStatus status = 4;
  string created_at = 5;
  string updated_at = 6;
  string scheduled_at = 7;
  string created_by = 8;
  map<string, string> metadata = 9;
}

enum CampaignStatus {
  DRAFT = 0;
  SCHEDULED = 1;
  ACTIVE = 2;
  COMPLETED = 3;
  PAUSED = 4;
  CANCELLED = 5;
}

message ListCampaignsRequest {
  uint32 page = 1;
  uint32 page_size = 2;
  string filter = 3;
}

message ListCampaignsResponse {
  repeated Campaign campaigns = 1;
  uint32 total_count = 2;
  uint32 page = 3;
  uint32 page_size = 4;
}

message GetCampaignRequest {
  string id = 1;
}

message CreateCampaignRequest {
  string name = 1;
  string description = 2;
  map<string, string> metadata = 3;
}

message UpdateCampaignRequest {
  string id = 1;
  string name = 2;
  string description = 3;
  CampaignStatus status = 4;
  map<string, string> metadata = 5;
}

message DeleteCampaignRequest {
  string id = 1;
}

message DeleteCampaignResponse {
  bool success = 1;
}

message ScheduleCampaignRequest {
  string id = 1;
  string scheduled_at = 2;
}

// Telegram messages
message TelegramMessageRequest {
  string chat_id = 1;
  string text = 2;
  bool use_markdown = 3;
  repeated string media_urls = 4;
  bool silent = 5;
  string reply_to_message_id = 6;
}

message TelegramMessageResponse {
  bool success = 1;
  string message_id = 2;
}

message ReceiveMessagesRequest {
  int64 offset = 1;
}

message TelegramMessageEvent {
  string message_id = 1;
  string chat_id = 2;
  string user_id = 3;
  string text = 4;
  repeated string media_urls = 5;
  string timestamp = 6;
}

message GetTemplatesRequest {
  string category = 1;
}

message GetTemplatesResponse {
  repeated MessageTemplate templates = 1;
}

message MessageTemplate {
  string id = 1;
  string name = 2;
  string content = 3;
  string category = 4;
  bool supports_variables = 5;
  repeated string required_variables = 6;
}

// Analytics messages
message CampaignMetricsRequest {
  string campaign_id = 1;
  string start_date = 2;
  string end_date = 3;
  repeated string metrics = 4;
}

message CampaignMetricsResponse {
  string campaign_id = 1;
  map<string, double> metrics = 2;
  repeated TimeSeriesData time_series = 3;
}

message TimeSeriesData {
  string metric = 1;
  repeated string timestamps = 2;
  repeated double values = 3;
}

message EngagementDataRequest {
  string start_date = 1;
  string end_date = 2;
  string segment = 3;
}

message EngagementDataResponse {
  double overall_engagement_rate = 1;
  repeated SegmentData segments = 2;
}

message SegmentData {
  string segment_name = 1;
  double engagement_rate = 2;
  uint32 user_count = 3;
}

message ReportRequest {
  string report_type = 1;
  string start_date = 2;
  string end_date = 3;
  map<string, string> parameters = 4;
  string format = 5;
}

message ReportResponse {
  string report_id = 1;
  string download_url = 2;
  string expires_at = 3;
}