// This is the Prisma schema file for Da Assistent
// Learn more about Prisma: https://pris.ly/docs

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model (optional)
model User {
  id        String    @id @default(uuid())
  email     String?   @unique
  name      String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  sessions  Session[]

  @@map("users")
}

// Session model for chat conversations
model Session {
  id        String    @id @default(uuid())
  title     String?
  userId    String
  summary   String?   @db.Text // Summary of older messages
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]

  @@index([userId])
  @@map("sessions")
}

// Message model for individual messages in a conversation
model Message {
  id        String    @id @default(uuid())
  sessionId String
  content   String    @db.Text
  senderId  String    // Can be user ID or assistant ID
  type      String    @default("TEXT") // TEXT, MEDIA, etc.
  status    String    @default("SENT") // DRAFT, SENT, FAILED
  metadata  Json?     // Additional metadata like tokens, sources, etc.
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  sentAt    DateTime  @default(now())
  session   Session   @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  media     Media[]

  @@index([sessionId])
  @@index([senderId])
  @@map("messages")
}

// Media model for attachments to messages
model Media {
  id        String   @id @default(uuid())
  messageId String
  url       String
  type      String   // IMAGE, VIDEO, AUDIO, FILE
  mimeType  String?
  filename  String?
  size      Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([messageId])
  @@map("media")
}

// AuditLog model for tracking system activity
model AuditLog {
  id          String   @id @default(uuid())
  userId      String?
  action      String
  entityType  String?
  entityId    String?
  metadata    Json?
  createdAt   DateTime @default(now())
  ipAddress   String?
  userAgent   String?

  @@index([userId])
  @@index([action])
  @@index([entityType, entityId])
  @@map("audit_logs")
}
